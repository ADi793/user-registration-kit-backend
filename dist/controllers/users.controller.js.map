{"version":3,"sources":["../../src/controllers/users.controller.ts"],"sourcesContent":["import { NextFunction, Request, Response } from 'express';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { User } from '@interfaces/users.interface';\nimport userService from '@services/users.service';\n\nclass UsersController {\n  public userService = new userService();\n\n  // public getUsers = async (req: Request, res: Response, next: NextFunction) => {\n  //   try {\n  //     const findAllUsersData: User[] = await this.userService.findAllUser();\n\n  //     res.status(200).json({ data: findAllUsersData, message: 'findAll' });\n  //   } catch (error) {\n  //     next(error);\n  //   }\n  // };\n\n  public getUserByEmail = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const email = req.body.email;\n\n      const findOneUserData: User = await this.userService.findUserByEmail(email);\n\n      res.status(200).json({ data: findOneUserData });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  public createUser = async (req: Request, res: Response, next: NextFunction) => {\n    try {\n      const userData: CreateUserDto = req.body;\n      const createUserData: User = await this.userService.createUser(userData);\n\n      res.status(201).json({ data: createUserData });\n    } catch (error) {\n      next(error);\n    }\n  };\n\n  // public updateUser = async (req: Request, res: Response, next: NextFunction) => {\n  //   try {\n  //     const userId: string = req.params.id;\n  //     const userData: CreateUserDto = req.body;\n  //     const updateUserData: User = await this.userService.updateUser(userId, userData);\n\n  //     res.status(200).json({ data: updateUserData, message: 'updated' });\n  //   } catch (error) {\n  //     next(error);\n  //   }\n  // };\n\n  // public deleteUser = async (req: Request, res: Response, next: NextFunction) => {\n  //   try {\n  //     const userId: string = req.params.id;\n  //     const deleteUserData: User = await this.userService.deleteUser(userId);\n\n  //     res.status(200).json({ data: deleteUserData, message: 'deleted' });\n  //   } catch (error) {\n  //     next(error);\n  //   }\n  // };\n}\n\nexport default UsersController;\n"],"names":["UsersController","userService","getUserByEmail","req","res","next","email","body","findOneUserData","findUserByEmail","status","json","data","error","createUser","userData","createUserData"],"mappings":";;;;+BAiEA;;;eAAA;;;qEA9DwB;;;;;;;;;;;;;;;;;;;AAExB,IAAA,AAAMA,kBAAN,MAAMA;;QACJ,uBAAOC,eAAc,IAAIA,qBAAW;QAEpC,iFAAiF;QACjF,UAAU;QACV,6EAA6E;QAE7E,4EAA4E;QAC5E,sBAAsB;QACtB,mBAAmB;QACnB,MAAM;QACN,KAAK;QAEL,uBAAOC,kBAAiB,OAAOC,KAAcC,KAAeC;YAC1D,IAAI;gBACF,MAAMC,QAAQH,IAAII,IAAI,CAACD,KAAK;gBAE5B,MAAME,kBAAwB,MAAM,IAAI,CAACP,WAAW,CAACQ,eAAe,CAACH;gBAErEF,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMJ;gBAAgB;YAC/C,EAAE,OAAOK,OAAO;gBACdR,KAAKQ;YACP;QACF;QAEA,uBAAOC,cAAa,OAAOX,KAAcC,KAAeC;YACtD,IAAI;gBACF,MAAMU,WAA0BZ,IAAII,IAAI;gBACxC,MAAMS,iBAAuB,MAAM,IAAI,CAACf,WAAW,CAACa,UAAU,CAACC;gBAE/DX,IAAIM,MAAM,CAAC,KAAKC,IAAI,CAAC;oBAAEC,MAAMI;gBAAe;YAC9C,EAAE,OAAOH,OAAO;gBACdR,KAAKQ;YACP;QACF;;AAwBF;MAEA,WAAeb"}