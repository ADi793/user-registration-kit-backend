{"version":3,"sources":["../../src/services/users.service.ts"],"sourcesContent":["import { hash } from 'bcrypt';\nimport { CreateUserDto } from '@dtos/users.dto';\nimport { HttpException } from '@exceptions/HttpException';\nimport { User } from '@interfaces/users.interface';\nimport userModel from '@models/users.model';\nimport { isEmpty } from '@utils/util';\n\nclass UserService {\n  public users = userModel;\n\n  // public async findAllUser(): Promise<User[]> {\n  //   const users: User[] = await this.users.find();\n  //   return users;\n  // }\n\n  public async findUserByEmail(email: string): Promise<User> {\n    if (isEmpty(email)) throw new HttpException(400, \"Invaild email-id.\");\n\n    const findUser: User = await this.users.findOne({ email });\n    if (!findUser) throw new HttpException(409, \"User not found.\");\n\n    return findUser;\n  }\n\n  public async createUser(userData: CreateUserDto): Promise<User> {\n    if (isEmpty(userData)) throw new HttpException(400, \"Invalid user data\");\n\n    const findUser: User = await this.users.findOne({ email: userData.email });\n    if (findUser) throw new HttpException(409, `You're email ${userData.email} already exists`);\n\n    const createUserData: User = await this.users.create(userData);\n\n    return createUserData;\n  }\n\n  // public async updateUser(userId: string, userData: CreateUserDto): Promise<User> {\n  //   if (isEmpty(userData)) throw new HttpException(400, \"You're not userData\");\n\n  //   if (userData.email) {\n  //     const findUser: User = await this.users.findOne({ email: userData.email });\n  //     if (findUser && findUser._id != userId) throw new HttpException(409, `You're email ${userData.email} already exists`);\n  //   }\n\n  //   if (userData.password) {\n  //     const hashedPassword = await hash(userData.password, 10);\n  //     userData = { ...userData, password: hashedPassword };\n  //   }\n\n  //   const updateUserById: User = await this.users.findByIdAndUpdate(userId, { userData });\n  //   if (!updateUserById) throw new HttpException(409, \"You're not user\");\n\n  //   return updateUserById;\n  // }\n\n  // public async deleteUser(userId: string): Promise<User> {\n  //   const deleteUserById: User = await this.users.findByIdAndDelete(userId);\n  //   if (!deleteUserById) throw new HttpException(409, \"You're not user\");\n\n  //   return deleteUserById;\n  // }\n}\n\nexport default UserService;\n"],"names":["UserService","findUserByEmail","email","isEmpty","HttpException","findUser","users","findOne","createUser","userData","createUserData","create","userModel"],"mappings":";;;;+BA8DA;;;eAAA;;;+BA5D8B;mEAER;sBACE;;;;;;;;;;;;;;;;;;;AAExB,IAAA,AAAMA,cAAN,MAAMA;IAGJ,gDAAgD;IAChD,mDAAmD;IACnD,kBAAkB;IAClB,IAAI;IAEJ,MAAaC,gBAAgBC,KAAa,EAAiB;QACzD,IAAIC,IAAAA,aAAO,EAACD,QAAQ,MAAM,IAAIE,4BAAa,CAAC,KAAK;QAEjD,MAAMC,WAAiB,MAAM,IAAI,CAACC,KAAK,CAACC,OAAO,CAAC;YAAEL;QAAM;QACxD,IAAI,CAACG,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK;QAE5C,OAAOC;IACT;IAEA,MAAaG,WAAWC,QAAuB,EAAiB;QAC9D,IAAIN,IAAAA,aAAO,EAACM,WAAW,MAAM,IAAIL,4BAAa,CAAC,KAAK;QAEpD,MAAMC,WAAiB,MAAM,IAAI,CAACC,KAAK,CAACC,OAAO,CAAC;YAAEL,OAAOO,SAASP,KAAK;QAAC;QACxE,IAAIG,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,CAAC,aAAa,EAAEK,SAASP,KAAK,CAAC,eAAe,CAAC;QAE1F,MAAMQ,iBAAuB,MAAM,IAAI,CAACJ,KAAK,CAACK,MAAM,CAACF;QAErD,OAAOC;IACT;;QAzBA,uBAAOJ,SAAQM,mBAAS;;AAoD1B;MAEA,WAAeZ"}