{"version":3,"sources":["../../src/middlewares/validation.middleware.ts"],"sourcesContent":["import { plainToClass } from 'class-transformer';\nimport { validate, ValidationError } from 'class-validator';\nimport { RequestHandler } from 'express';\nimport { HttpException } from '@exceptions/HttpException';\n\nconst validationMiddleware = (\n  type: any,\n  value: string | 'body' | 'query' | 'params' = 'body',\n  skipMissingProperties = false,\n  whitelist = true,\n  forbidNonWhitelisted = true,\n): RequestHandler => {\n  return (req, res, next) => {\n    validate(plainToClass(type, req[value]), { skipMissingProperties, whitelist, forbidNonWhitelisted, stopAtFirstError: true }).then((errors: ValidationError[]) => {\n      if (errors.length > 0) {\n        // const message = errors.map((error: ValidationError) => Object.values(error.constraints)).join(', ');\n        next(new HttpException(400, Object.values(errors[0].constraints)[0]));\n      } else {\n        next();\n      }\n    });\n  };\n};\n\nexport default validationMiddleware;\n"],"names":["validationMiddleware","type","value","skipMissingProperties","whitelist","forbidNonWhitelisted","req","res","next","validate","plainToClass","stopAtFirstError","then","errors","length","HttpException","Object","values","constraints"],"mappings":";;;;+BAwBA;;;eAAA;;;kCAxB6B;gCACa;+BAEZ;AAE9B,MAAMA,uBAAuB,CAC3BC,MACAC,QAA8C,MAAM,EACpDC,wBAAwB,KAAK,EAC7BC,YAAY,IAAI,EAChBC,uBAAuB,IAAI;IAE3B,OAAO,CAACC,KAAKC,KAAKC;QAChBC,IAAAA,wBAAQ,EAACC,IAAAA,8BAAY,EAACT,MAAMK,GAAG,CAACJ,MAAM,GAAG;YAAEC;YAAuBC;YAAWC;YAAsBM,kBAAkB;QAAK,GAAGC,IAAI,CAAC,CAACC;YACjI,IAAIA,OAAOC,MAAM,GAAG,GAAG;gBACrB,uGAAuG;gBACvGN,KAAK,IAAIO,4BAAa,CAAC,KAAKC,OAAOC,MAAM,CAACJ,MAAM,CAAC,EAAE,CAACK,WAAW,CAAC,CAAC,EAAE;YACrE,OAAO;gBACLV;YACF;QACF;IACF;AACF;MAEA,WAAeR"}